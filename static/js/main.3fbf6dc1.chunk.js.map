{"version":3,"sources":["components/Graph/index.js","components/Title/index.js","components/ListSelectPlant/index.js","components/RouteSelectPlant/index.js","components/App/index.js","serviceWorker.js","index.js","assets/plant1.png","assets/plant2.png","assets/plant3.png","assets/plant4.png"],"names":["Graph","props","handleChangeSelection","data","react_default","a","createElement","Fragment","style","display","margin","justifyContent","name","onChange","fontSize","defaultValue","value","height","es","options","maintainAspectRatio","scales","yAxes","ticks","suggestedMax","suggestedMin","id","scaleLabel","beginAtZero","xAxes","type","time","unit","TitleText","styled","h1","_templateObject","Title","children","PlantLink","Link","ListSelectPlant_templateObject","Outer","div","_templateObject2","ListSelectPlant","plants","onSelectPlant","map","plant","key","to","onClick","src","imgUrl","width","alt","RouteSelectPlant","RouteSelectPlant_Outer","components_Title","components_ListSelectPlant","this","plantImg1","plantImg2","plantImg3","plantImg4","Component","RouteSelectPlant_templateObject","PropTypes","func","routerHistory","createBrowserHistory","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","loadData","stop","_ref2","_callee2","response","moistureData","tempData","finalData","_context2","axios","get","concat","crossDomain","sent","item","x","moment","unix","timestamp","format","y","Number","level","filter","temp","Math","round","datasets","label","backgroundColor","borderColor","yAxisID","setState","_x","apply","arguments","handleChange","evt","target","handleSelectPlant","plantName","state","undefined","objectSpread","defineProperty","_this2","react_router","history","path","render","components_Graph","components_RouteSelectPlant","JSON","stringify","from","Boolean","window","location","hostname","match","ReactDOM","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.3fbf6dc1.chunk.js","sourcesContent":["import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport PropTypes from 'prop-types';\n\nconst Graph = (props) => {\n  const { handleChangeSelection, data } = props;\n  return (\n    <React.Fragment>\n      <div\n        style={{ display: \"flex\", margin: \"10px\", justifyContent: \"center\" }}\n      >\n        <select\n          name=\"id\"\n          onChange={handleChangeSelection}\n          style={{ fontSize: \"1.2rem\" }}\n          defaultValue=\"testthree\"\n        >\n          <option value=\"pizero\">Week 1</option>\n          <option value=\"testone\">Week 2</option>\n          <option value=\"testtwo\">Week 3</option>\n          <option value=\"testthree\">Week 4</option>\n        </select>\n      </div>\n      <div style={{ height: \"80vh\" }}>\n        <Bar\n          data={data}\n          options={{\n            maintainAspectRatio: false,\n            scales: {\n              yAxes: [\n                {\n                  ticks: {\n                    suggestedMax: 10,\n                    suggestedMin: 5\n                  }\n                },\n                {\n                  id: \"temp\",\n                  display: false,\n                  scaleLabel: {\n                    display: false\n                  },\n                  ticks: {\n                    beginAtZero: true\n                  }\n                }\n              ],\n              xAxes: [\n                {\n                  type: \"time\",\n                  time: {\n                    unit: \"day\"\n                  }\n                }\n              ]\n            }\n          }}\n        />\n      </div>\n    </React.Fragment>\n  );\n}\n\nGraph.propTypes = {\n  data: PropTypes.object,\n  handleChangeSelection: PropTypes.func,\n}\nexport default Graph;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Title = (props) => {\n  return <TitleText>{props.children}</TitleText>\n}\n\nTitle.propTypes = {\n  text: PropTypes.string,\n}\n\nconst TitleText = styled.h1`\n  font-size: 23px;\n  font-weight: 600;\n  font-family: sans-serif;\n`;\n\nexport default Title;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst ListSelectPlant = (props) => {\n  const { plants, onSelectPlant } = props;\n  return <Outer>\n    {plants.map(plant => (\n      <PlantLink\n        key={plant.name}\n        to=\"/plantdetails\"\n        onClick={() => onSelectPlant(plant.name)}>\n        <img src={plant.imgUrl} height=\"80px\" width=\"100px\" alt=\"Plant\" />\n        {plant.name}\n      </PlantLink>\n    ))}\n  </Outer>\n}\n\nconst PlantLink = styled(Link)`\n  text-decoration: none;\n  color: #000;\n  border: 2px solid #d0e647;\n  border-radius: 10px;\n  margin: 15px;\n  height: 160px;\n  width: 150px;\n  display: flex;\n  justify-content: center;\n  font-size: 16px;\n  font-weight: 500;\n  text-align: center;\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: space-around;\n  align-items: center;\n`;\n\nconst Outer = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n`;\nListSelectPlant.propTypes = {\n  onSelectPlant: PropTypes.func,\n  plants: PropTypes.arrayOf(PropTypes.objectOf({\n    name: PropTypes.string,\n    imgUrl: PropTypes.string,\n  }))\n}\nexport default ListSelectPlant;\n","import React, { Component } from \"react\";\nimport Title from '../Title';\nimport styled from 'styled-components';\nimport ListSelectPlant from \"../ListSelectPlant\";\nimport plantImg1 from \"../../assets/plant1.png\";\nimport plantImg2 from \"../../assets/plant2.png\";\nimport plantImg3 from \"../../assets/plant3.png\";\nimport plantImg4 from \"../../assets/plant4.png\";\nimport PropTypes from 'prop-types';\n\nclass RouteSelectPlant extends Component {\n  render() {\n    return (\n      <Outer>\n        <Title>{\"Select your plant type\"}</Title>\n        <ListSelectPlant\n        onSelectPlant={this.props.onSelectPlant}\n          plants={[\n            {\n              name: 'Lemon Lime Dracaena',\n              imgUrl: plantImg1,\n            },\n            {\n              name: 'Cherry Grape Orchidea',\n              imgUrl: plantImg2,\n            },\n            {\n              name: 'Arctic Flavorblast Millefolium',\n              imgUrl: plantImg3,\n            },\n            {\n              name: 'Grandpappy\\'s Wort (Palmatum)',\n              imgUrl: plantImg4,\n            },\n            {\n              name: 'Coreopsis Anachronosis',\n              imgUrl: plantImg1,\n            },\n            {\n              name: 'Dutchmen\\'s Breeches',\n              imgUrl: plantImg2,\n            },\n            {\n              name: 'Red-Necked Foxworthy',\n              imgUrl: plantImg3,\n            },\n            {\n              name: 'Bachelor Buttons, Perrenial',\n              imgUrl: plantImg4,\n            },\n            {\n              name: 'Boston \"Strangler\" Ivy',\n              imgUrl: plantImg1,\n            },\n            {\n              name: 'Ambiguous Gluteus Maximus',\n              imgUrl: plantImg2,\n            },\n            {\n              name: 'Flowers?',\n              imgUrl: plantImg3,\n            },\n            {\n              name: 'Helvetica Neue',\n              imgUrl: plantImg4,\n            },\n          ]}\n        />\n      </Outer>\n    );\n  }\n}\n\nconst Outer = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n  padding: 60px;\n`;\n\nRouteSelectPlant.props = {\n  onSelectPlant: PropTypes.func,\n}\nexport default RouteSelectPlant;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport Graph from \"../Graph/\";\nimport { Switch, Route, Redirect, Router } from 'react-router-dom';\nimport RouteSelectPlant from '../RouteSelectPlant';\nimport { createBrowserHistory } from \"history\";\n\nconst routerHistory = createBrowserHistory()\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {},\n      plants: {},\n    };\n  }\n\n  componentDidMount = async () => {\n    this.loadData(\"testthree\");\n  };\n\n  loadData = async id => {\n    const response = await axios.get(\n      `https://us-central1-happyplantcloudfunctions.cloudfunctions.net/getMoistureHistory?instanceId=${id}`,\n      {\n        crossDomain: true\n      }\n    );\n\n    const moistureData = response.data.map(item => ({\n      x: moment.unix(item.timestamp).format(\"lll\"),\n      y: Number(item.level / 100)\n    }));\n\n    const tempData = response.data\n      .filter(item => item.temp)\n      .map(item => ({\n        x: moment.unix(item.timestamp).format(\"lll\"),\n        y: Math.round(item.temp * 1.8 + 32)\n      }));\n\n    const finalData = {\n      datasets: [\n        {\n          label: \"Moisture Level\",\n          type: \"line\",\n          backgroundColor: \"rgba(3,176,224,0.4)\",\n          borderColor: \"rgba(3,176,224,1)\",\n          data: moistureData\n        },\n        {\n          label: \"Temperature\",\n          yAxisID: \"temp\",\n          type: \"bar\",\n          backgroundColor: \"rgba(58, 60, 62,0.4)\",\n          borderColor: \"rgba(58, 60, 62,1)\",\n          data: tempData\n        }\n      ]\n    };\n\n    this.setState({\n      data: finalData\n    });\n  };\n\n  handleChange = evt => {\n    this.loadData(evt.target.value);\n  };\n\n  handleSelectPlant = (plantName) => {\n    const { plants } = this.state;\n    if (plants[plantName] === undefined) {\n      this.setState({\n        plants: {\n          ...plants,\n          [plantName]: {}\n        }\n      })\n    }\n  }\n  render() {\n    return (\n      <Router history={routerHistory}>\n        <Switch>\n          <Route path=\"/graph\" render={() => (\n            <Graph\n              handleChangeSelection={this.handleChange}\n              data={this.state.data}\n            />\n          )} />\n          <Route path=\"/selectplant\" render={() => (\n            <RouteSelectPlant\n              onSelectPlant={this.handleSelectPlant}\n            />\n          )}\n          />\n          <Route path=\"/plantdetails\" render={() => (\n            <div>{JSON.stringify(this.state.plants)}</div>\n          )}\n          />\n          <Redirect from=\"/\" to=\"/graph\" />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/plant1.e40c9702.png\";","module.exports = __webpack_public_path__ + \"static/media/plant2.f001b3bc.png\";","module.exports = __webpack_public_path__ + \"static/media/plant3.73788fd5.png\";","module.exports = __webpack_public_path__ + \"static/media/plant4.39851ff5.png\";"],"sourceRoot":""}