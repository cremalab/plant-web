{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","loadData","stop","_ref2","_callee2","id","response","moistureData","tempData","finalData","_context2","axios","get","concat","crossDomain","sent","data","map","item","x","moment","unix","timestamp","format","y","Number","level","filter","temp","Math","round","datasets","label","type","backgroundColor","borderColor","yAxisID","setState","_x","apply","arguments","handleChange","evt","target","value","state","react_default","createElement","Fragment","style","display","margin","justifyContent","name","onChange","fontSize","defaultValue","height","es","options","maintainAspectRatio","scales","yAxes","ticks","suggestedMax","suggestedMin","scaleLabel","beginAtZero","xAxes","time","unit","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4795e46.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Bar } from \"react-chartjs-2\";\nimport moment from \"moment\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {}\n    };\n  }\n\n  componentDidMount = async () => {\n    this.loadData(\"testthree\");\n  };\n\n  loadData = async id => {\n    const response = await axios.get(\n      `https://us-central1-happyplantcloudfunctions.cloudfunctions.net/getMoistureHistory?instanceId=${id}`,\n      {\n        crossDomain: true\n      }\n    );\n\n    const moistureData = response.data.map(item => ({\n      x: moment.unix(item.timestamp).format(\"lll\"),\n      y: Number(item.level / 100)\n    }));\n\n    const tempData = response.data\n      .filter(item => item.temp)\n      .map(item => ({\n        x: moment.unix(item.timestamp).format(\"lll\"),\n        y: Math.round(item.temp * 1.8 + 32)\n      }));\n\n    const finalData = {\n      datasets: [\n        {\n          label: \"Moisture Level\",\n          type: \"line\",\n          backgroundColor: \"rgba(3,176,224,0.4)\",\n          borderColor: \"rgba(3,176,224,1)\",\n          data: moistureData\n        },\n        {\n          label: \"Temperature\",\n          yAxisID: \"temp\",\n          type: \"bar\",\n          backgroundColor: \"rgba(58, 60, 62,0.4)\",\n          borderColor: \"rgba(58, 60, 62,1)\",\n          data: tempData\n        }\n      ]\n    };\n\n    this.setState({\n      data: finalData\n    });\n  };\n\n  handleChange = evt => {\n    this.loadData(evt.target.value);\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div\n          style={{ display: \"flex\", margin: \"10px\", justifyContent: \"center\" }}\n        >\n          <select\n            name=\"id\"\n            onChange={this.handleChange}\n            style={{ fontSize: \"1.2rem\" }}\n            defaultValue=\"testthree\"\n          >\n            <option value=\"pizero\">Week 1</option>\n            <option value=\"testone\">Week 2</option>\n            <option value=\"testtwo\">Week 3</option>\n            <option value=\"testthree\">Week 4</option>\n          </select>\n        </div>\n        <div style={{ height: \"80vh\" }}>\n          <Bar\n            data={this.state.data}\n            options={{\n              maintainAspectRatio: false,\n              scales: {\n                yAxes: [\n                  {\n                    ticks: {\n                      suggestedMax: 10,\n                      suggestedMin: 5\n                    }\n                  },\n                  {\n                    id: \"temp\",\n                    display: false,\n                    scaleLabel: {\n                      display: false\n                    },\n                    ticks: {\n                      beginAtZero: true\n                    }\n                  }\n                ],\n                xAxes: [\n                  {\n                    type: \"time\",\n                    time: {\n                      unit: \"day\"\n                    }\n                  }\n                ]\n              }\n            }}\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}